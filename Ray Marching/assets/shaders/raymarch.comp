#version 460 core

layout (local_size_x = 32, local_size_y = 16, local_size_z = 1) in;

layout (rgba8, binding = 0) uniform image2D img_output;

uniform uint width;
uniform uint height;

uniform uint numRaymarchObjects;
uniform uint numPointLights;
uniform uint numDirectionalLights;

uniform mat4 inverseProjectionMatrix;
uniform mat4 inverseViewMatrix;

uniform vec3 cameraOrigin;

//const uint MAX_STEPS = 200;
const float MAX_DISTANCE = 100;
const float EPSILON = 0.001;

// need this because using vec3 in the bufferobject
// made the objects use more bytes than they should use
struct RaymarchObjectTrash 
{
    float position[3];
    float rotation[3];
    float scale[3];
    float diffuseColor[3];
    uint type; // 0 Sphere, 1 Box, 2 Torus
    uint combineType; // 0 Blend, 1 Mask, 2 Substract
    float blendStrength;
    uint numChildren;
};

struct PointLightTrash
{
    float position[3];
    float color[3];
    float intensity;
};

struct DirectionalLightTrash
{
    float direction[3];
    float color[3];
};

layout(std430, binding = 1) buffer RaymarchObjectsBuffer
{
    RaymarchObjectTrash raymarchObjects[];
};

layout(std430, binding = 2) buffer PointLightsBuffer
{
    PointLightTrash pointLights[];
};

layout(std430, binding = 3) buffer DirectionalLightsBuffer
{
    DirectionalLightTrash directionalLights[];
};

struct Transform 
{
    vec3 position;
    vec3 rotation;
    vec3 scale;
};

struct Material 
{
    vec3 diffuseColor;
};

struct RaymarchObject 
{
    Transform transform;
    Material material;
    uint type; // 0 Sphere, 1 Box, 2 Torus
    uint combineType; // 0 Blend, 1 Mask, 2 Substract
    float blendStrength;
    uint numChildren;
};

struct PointLight
{
    vec3 position;
    vec3 color;
    float intensity;
};

struct DirectionalLight
{
    vec3 direction;
    vec3 color;
};

struct Ray 
{
    vec3 origin;
    vec3 direction;
};

struct HitInfo 
{
    float minDistance;
    float totalDistance;
    bool hit;
    Material material;
    vec3 surfacePoint;
};

struct SceneInfo 
{
    float distance;
    Material material;
};

struct ChildSceneInfo 
{
    float distance;
    Material material;
    uint indicesToSkip;
};

RaymarchObject trashToObject(RaymarchObjectTrash trash) 
{
    RaymarchObject object;
    object.transform.position = vec3(trash.position[0], trash.position[1], trash.position[2]);
    object.transform.rotation = vec3(trash.rotation[0], trash.rotation[1], trash.rotation[2]);
    object.transform.scale = vec3(trash.scale[0], trash.scale[1], trash.scale[2]);
    object.material.diffuseColor = vec3(trash.diffuseColor[0], trash.diffuseColor[1], trash.diffuseColor[2]);
    object.type = trash.type;
    object.combineType = trash.combineType;
    object.blendStrength = trash.blendStrength;
    object.numChildren = trash.numChildren;
    return object;
}

PointLight trashToPointLight(PointLightTrash trash)
{
    PointLight light;
    light.position = vec3(trash.position[0], trash.position[1], trash.position[2]);
    light.color = vec3(trash.color[0], trash.color[1], trash.color[2]);
    light.intensity = trash.intensity;
    return light;
}

DirectionalLight trashToDirectionalLight(DirectionalLightTrash trash)
{
    DirectionalLight light;
    light.direction = vec3(trash.direction[0], trash.direction[1], trash.direction[2]);
    light.color = vec3(trash.color[0], trash.color[1], trash.color[2]);
    return light;
}

float sd_Sphere(RaymarchObject sphere, vec3 point) 
{
    vec3 center = sphere.transform.position;
    float radius = sphere.transform.scale.x;
    vec3 p = point - center;
    return length(p) - radius;
}

float sd_Box(RaymarchObject box, vec3 point) 
{
    vec3 center = box.transform.position;
    vec3 size = box.transform.scale;
    vec3 p = point - center;
    vec3 q = abs(p) - size;
    return min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0));
}

float sd_Torus(RaymarchObject torus, vec3 point) 
{
    vec3 center = torus.transform.position;
    vec2 size = torus.transform.scale.xy;
    vec3 p = point - center;
    vec2 q = vec2(length(p.xz) - size.x, p.y);
    return length(q) - size.y;
}

float getShapeDistance(RaymarchObject object, vec3 point) 
{
    float distance = MAX_DISTANCE;

    switch (object.type)
    {
        case 0: // Sphere
            distance = sd_Sphere(object, point);
            break;
        case 1: // Box
            distance = sd_Box(object, point);
            break;
        case 2: // Torus
            distance = sd_Torus(object, point);
            break;
    }

    return distance;
}

float lerp(float a, float b, float t) 
{
    return a + ((b - a) * t);
}

vec3 lerp(vec3 a, vec3 b, float t) 
{
    return vec3(
        lerp(a.x, b.x, t),
        lerp(a.y, b.y, t),
        lerp(a.z, b.z, t)
    );
}

// https://www.iquilezles.org/www/articles/smin/smin.htm
SceneInfo blend(float distanceA, float distanceB, Material materialA, Material materialB, float k)
{
    SceneInfo blendInfo;

    float h = clamp(0.5+0.5*(distanceB-distanceA)/k, 0.0, 1.0);
    float blendDistance = lerp(distanceB, distanceA, h) - k*h*(1.0-h);
    vec3 blendDiffuseColor = lerp(materialB.diffuseColor, materialA.diffuseColor, h);

    blendInfo.distance = blendDistance;
    blendInfo.material.diffuseColor = blendDiffuseColor;
    return blendInfo;
}

SceneInfo intersect(float distanceA, float distanceB, Material materialA, Material materialB) 
{
    SceneInfo intersectionInfo;
    intersectionInfo.distance = distanceA;
    intersectionInfo.material = materialB;

    if (distanceB > distanceA) 
    {
        intersectionInfo.distance = distanceB;
    }

    return intersectionInfo;
}

SceneInfo substract(float distanceA, float distanceB, Material materialA, Material materialB) 
{
    SceneInfo intersectionInfo;
    intersectionInfo.distance = distanceA;
    intersectionInfo.material = materialA;

    if (-distanceB > distanceA) 
    {
        intersectionInfo.distance = -distanceB;
        intersectionInfo.material = materialB;
    }

    return intersectionInfo;
}

void setCombineDistance(inout float combineDistance, uint combineType) 
{
    switch (combineType) 
    {
        case 0: // blending 
            // do nothing
            break;
        case 1: // intersection
            combineDistance = MAX_DISTANCE;
            break;
        case 2: // substraction
            combineDistance = 0;
            break;
    }
}

void combine(inout float combineDistance, inout Material combineMaterial, 
             float distanceA, float distanceB, 
             Material materialA, Material materialB, 
             uint combineType, float blendStrength
) 
{
    SceneInfo sceneInfo;
    switch (combineType) 
    {
        case 0: // blending
            sceneInfo = blend(combineDistance, distanceB, combineMaterial, materialB, blendStrength);
            combineDistance = sceneInfo.distance;
            combineMaterial = sceneInfo.material;
            break;
        case 1: // intersection
            sceneInfo = intersect(distanceA, distanceB, materialA, materialB);
            if (sceneInfo.distance < combineDistance) 
            {
                combineDistance = sceneInfo.distance;
                combineMaterial = sceneInfo.material;
            }
            break;
        case 2: // susbstraction
            sceneInfo = substract(distanceA, distanceB, materialA, materialB);
            if (sceneInfo.distance > combineDistance) 
            {
                combineDistance = sceneInfo.distance;
                combineMaterial = materialA;
            }
            break;
    }
}

uint childSceneInfo(
    inout float combineDistance, inout Material combineMaterial,
    float parentDistance, RaymarchObject parent,
    uint childIndex, RaymarchObject child,
    vec3 point
) 
{
    SceneInfo sceneInfo;
    sceneInfo.distance = getShapeDistance(child, point);
    sceneInfo.material = child.material;

    uint indicesToSkip = 1 + child.numChildren;

    /*
    i wanted to have recursion, but i forgot that glsl doesnt support recursion
    for (uint i = childIndex + 1; i < childIndex + 1 + child.numChildren; i++) 
    {
        RaymarchObject childOfChild = trashToObject(raymarchObjects[i]);
        ChildSceneInfo childInfo = childSceneInfo(combineDistance, combineMaterial, sceneInfo.distance, child, i, childOfChild, point);
        sceneInfo.distance = childInfo.distance;
        sceneInfo.material = childInfo.material;
        indicesToSkip += childInfo.indicesToSkip;
    }
    */
    
    //setCombineDistance(combineDistance, parent.combineType);
    
    combine(combineDistance, combineMaterial, parentDistance, sceneInfo.distance, parent.material, sceneInfo.material, parent.combineType, child.blendStrength);
    
    return indicesToSkip;
}

SceneInfo sceneInfo(vec3 point) 
{
    SceneInfo sceneInfo;
    sceneInfo.distance = MAX_DISTANCE;
    sceneInfo.material;

    for (uint i = 0; i < numRaymarchObjects; i++) 
    {
        RaymarchObject object = trashToObject(raymarchObjects[i]);
        float localDistance = getShapeDistance(object, point);
        Material localMaterial = object.material;

        uint indicesToSkip = 0;

        float combineDistance = localDistance;
        if (object.numChildren > 0) 
        {
            setCombineDistance(combineDistance, object.combineType);
        }
        Material combineMaterial = localMaterial;
        
        for (uint j = i + 1; j < i + 1 + object.numChildren; j++) 
        {
            RaymarchObject child = trashToObject(raymarchObjects[j]);

            indicesToSkip += childSceneInfo(combineDistance, combineMaterial, localDistance, object, j, child, point);
        }

        localDistance = combineDistance;
        localMaterial = combineMaterial;
        i += indicesToSkip;

        if (localDistance < sceneInfo.distance) 
        {
            sceneInfo.distance = localDistance;
            sceneInfo.material = localMaterial;
        }
    }
    return sceneInfo;
}

HitInfo rayMarch(Ray ray) 
{
    HitInfo hitInfo;
    hitInfo.totalDistance = 0.0;
    hitInfo.minDistance = MAX_DISTANCE;
    hitInfo.hit = false;
    
    while (hitInfo.totalDistance < MAX_DISTANCE)
    {
        vec3 point = ray.origin + ray.direction * hitInfo.totalDistance;

        SceneInfo sceneInfo = sceneInfo(point);

        if (sceneInfo.distance < EPSILON) 
        {
            hitInfo.minDistance = sceneInfo.distance;
            hitInfo.hit = true;
            hitInfo.material = sceneInfo.material;
            hitInfo.surfacePoint = point;
            break;
        }

        if (sceneInfo.distance < hitInfo.minDistance)
        {
            hitInfo.minDistance = sceneInfo.distance;
        }

        hitInfo.totalDistance += sceneInfo.distance;
        if (hitInfo.totalDistance > MAX_DISTANCE) 
        {
            break;
        }
    }

    return hitInfo;
}

vec3 approximateNormal(vec3 point) 
{
    float x = sceneInfo(vec3(point.x + EPSILON, point.yz)).distance - sceneInfo(vec3(point.x - EPSILON, point.yz)).distance;
    float y = sceneInfo(vec3(point.x, point.y + EPSILON, point.z)).distance - sceneInfo(vec3(point.x, point.y - EPSILON, point.z)).distance;
    float z = sceneInfo(vec3(point.xy, point.z + EPSILON)).distance - sceneInfo(vec3(point.xy, point.z - EPSILON)).distance;
    return normalize(vec3(x, y, z));
}

vec3 calculatePointLighting(PointLight light, vec3 surfacePoint, vec3 normal, vec3 viewDir, Material material)
{
    vec3 lightDir = normalize(light.position - surfacePoint);
    float dotNL = dot(normal, lightDir);
    vec3 diffuse = material.diffuseColor * max(dotNL, 0.0) * light.color * light.intensity;

    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * material.diffuseColor;

    return ambient + diffuse;
}


vec3 calculateDirectionalLighting(DirectionalLight light, vec3 normal, vec3 viewDir, Material material) 
{
    float dotNL = dot(normal, light.direction);
    vec3 diffuse = material.diffuseColor * max(dotNL, 0.0) * light.color;

    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * material.diffuseColor;

    return ambient + diffuse;
}


void main()
{
    vec2 pixel_coords = vec2(gl_GlobalInvocationID.xy);

    if (pixel_coords.x >= width || pixel_coords.y >= height) 
    {
        return;
    }

    vec2 uv = vec2(pixel_coords.x / width, pixel_coords.y / height) * 2.0 - 1.0;

    Ray ray;

    ray.origin = cameraOrigin;
    vec4 target = inverseProjectionMatrix * vec4(uv, 1.0, 1.0);
    ray.direction = vec3(inverseViewMatrix * vec4(normalize(vec3(target) / target.w), 0));
    
    // i am doing this because i want a bigger z value to mean further from the camera (relative to default camera rotation)
    // i think this has something to do with left-hand and right-hand coordinate system (i dont know)
    // all that matters is that this makes it work
    // theres probably a more sophisticated way
    ray.origin.z *= -1;
    ray.direction.z *= -1;
    
    HitInfo hitInfo = rayMarch(ray);

    if (!hitInfo.hit) // return early if it didnt hit
    {
        return;
    }

    vec3 lighting = vec3(0.0);
    vec3 normal = approximateNormal(hitInfo.surfacePoint - (ray.direction * EPSILON));
    vec3 viewDir = normalize(cameraOrigin - hitInfo.surfacePoint);

    for (uint i = 0; i < numDirectionalLights; i++)
    {
        DirectionalLight dLight = trashToDirectionalLight(directionalLights[i]);
        lighting += calculateDirectionalLighting(dLight, normal, viewDir, hitInfo.material);
    }

    for (uint i = 0; i < numPointLights; i++)
    {
        PointLight pLight = trashToPointLight(pointLights[i]);
        lighting += calculatePointLighting(pLight, hitInfo.surfacePoint, normal, viewDir, hitInfo.material);
    }

    vec4 pixel = vec4(lighting, 1.0);

    imageStore(img_output, ivec2(gl_GlobalInvocationID.xy), pixel);
}
