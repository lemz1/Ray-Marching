#version 460 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (rgba8, binding = 0) uniform image2D img_output;

uniform uint width;
uniform uint height;

uniform uint numSDFObjects;
uniform uint numPointLights;
uniform uint numDirectionalLights;

struct SDFObject 
{
    vec3 position;
    vec3 rotation;
    vec3 scale;
    uint type; // 0 Sphere, 1 Box, 2 Torus
};

struct PointLight
{
    vec3 position;
    vec3 color;
    uint lightFalloffType; // 0 None, 1 Linear, 2 Quadractic
    float intensity;
};

struct DirectionalLight 
{
    vec3 direction;
    vec3 color;
};

layout(std430, binding = 1) buffer SDFObjectsBuffer
{
    SDFObject sdfObjects[];
};

layout(std430, binding = 2) buffer PointLightsBuffer
{
    PointLight pointLights[];
};

layout(std430, binding = 3) buffer DirectionalLightsBuffer
{
    DirectionalLight directionalLights[];
};

struct Ray 
{
    vec3 origin;
    vec3 direction;
};

struct HitInfo 
{
    float minDistance;
    float totalDistance;
    bool hit;
    uint index;
};

float sd_Sphere(SDFObject sphere, vec3 point) 
{
    return length(point - sphere.position) - sphere.scale.x;
}

vec3 calculateLighting(DirectionalLight light, vec3 normal) 
{
    float dotNL = dot(normal, light.direction);
    vec3 diffuse = max(dotNL, 0.0) * light.color;
    return diffuse;
}

const uint MAX_STEPS = 100;
const float MAX_DISTANCE = 100;
const float epsilon = 0.01;
HitInfo rayMarch(Ray ray) 
{
    HitInfo hitInfo;
    hitInfo.totalDistance = 0.0;
    hitInfo.minDistance = MAX_DISTANCE;
    hitInfo.hit = false;
    hitInfo.index = 0;
    
    for (int i = 0; i < MAX_STEPS; i++) 
    {
        vec3 point = ray.origin + ray.direction * hitInfo.totalDistance;

        float d = MAX_DISTANCE;

        for (int j = 0; j < numSDFObjects; j++) 
        {
            float localD;
            switch (sdfObjects[j].type)
            {
                case 0: // Sphere
                    localD = sd_Sphere(sdfObjects[j], point);
                    break;
                case 1: // Box
                    localD = sd_Sphere(sdfObjects[j], point);
                    break;
                case 2: // Torus
                    localD = sd_Sphere(sdfObjects[j], point);
                    break;
            }
            if (localD < d) 
            {
                d = localD;
                hitInfo.index = j;
            }
        }

        if (d < epsilon) 
        {
            hitInfo.minDistance = d;
            hitInfo.hit = true;
            break;
        }

        hitInfo.totalDistance += d;
        if (hitInfo.totalDistance > MAX_DISTANCE) 
        {
            break;
        } 
        else if (hitInfo.totalDistance < hitInfo.minDistance)
        {
            hitInfo.minDistance = hitInfo.totalDistance;
        }
    }

    return hitInfo;
}

void main()
{
    vec2 pixel_coords = vec2(gl_GlobalInvocationID.xy);

    if (pixel_coords.x >= width || pixel_coords.y >= height) 
    {
        return;
    }

    vec2 uv = vec2(pixel_coords.x / width, pixel_coords.y / height) * 2.0 - 1.0;
    uv.x *= float(width) / float(height);

    DirectionalLight light;
    light.direction = normalize(vec3(0, 1, 0)); // Set the direction of the light
    light.color = vec3(1, 1, 1); // Set the color of the light

    Ray ray;
    ray.origin = vec3(0, 0, -2); // Set the origin of the ray
    ray.direction = normalize(vec3(uv, 1)); // Set the direction of the ray

    HitInfo hitInfo = rayMarch(ray);
    vec4 pixel;

    if (hitInfo.hit) // If the ray hits the sphere
    {
        vec3 normal = normalize(ray.origin + ray.direction * hitInfo.totalDistance - sdfObjects[hitInfo.index].position); // Calculate the normal
        vec3 lighting = calculateLighting(light, normal); // Calculate the lighting
        vec3 ambientColor = vec3(0.2, 0.0, 0.0);
        vec3 diffuseColor = vec3(1.0, 0.0, 0.0);
        pixel = vec4(ambientColor + diffuseColor * lighting, 1.0); // Set the pixel color to the lighting
    }
    else
    {
        pixel = vec4(0.0, 0.0, 0.0, 1.0); // Set the pixel color to black
    }

    imageStore(img_output, ivec2(gl_GlobalInvocationID.xy), pixel);
}
